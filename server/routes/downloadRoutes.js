
import express from 'express';
import archiver from 'archiver';
import GeneratedUI from '../models/GeneratedUISchema.js'; // âœ… Make sure path is correct
const router = express.Router();

router.get('/:id', async (req, res) => {
  try {
    const ui = await GeneratedUI.findById(req.params.id);
    if (!ui) return res.status(404).json({ error: 'Generated UI not found' });

    const filename = `generated-ui-${req.params.id}.zip`;

    // Set headers to force download
    res.set({
      'Content-Type': 'application/zip',
      'Content-Disposition': `attachment; filename="${filename}"`,
    });

    // Create zip stream
    const archive = archiver('zip', { zlib: { level: 9 } });

    // Handle zip errors
    archive.on('error', (err) => {
      console.error('Archiving error:', err);
      res.status(500).send('Failed to generate ZIP file');
    });

    // Pipe the zip stream to the response
    archive.pipe(res);

    // Add generated code as index.jsx
    archive.append(ui.generatedCode || '// No code generated', { name: 'index.jsx' });

    // Optionally add a README
    archive.append(`Generated by UI Genie ðŸš€\n\nImage URL: ${ui.imageUrl}`, {
      name: 'README.txt',
    });

    // Finalize zip
    archive.finalize();
  } catch (err) {
    console.error('Download error:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;
